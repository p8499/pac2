## Context:
##   Class StringUtils
##   Class JsonPath
##   LinkedHashMap project
##   Integer index
#set($projectContext=$JsonPath.parse($project))

#set($module=$project.modules[$index])
class ${module.alias}Mask {
    #set($keyUnique=$projectContext.read("$.modules[$index].uniques[?(@.key==true)]")[0])
    public mask: number;
    constructor (
        #foreach($field in $module.fields)
            $field.databaseColumn: boolean = false
            #if($velocityHasNext)
                ,
            #end
        #end
    ) {
        this.mask = 0b$StringUtils.repeat("0",$module.fields.size());
        #foreach($field in $module.fields)
            if ($field.databaseColumn)
                this.set$StringUtils.capitalize($field.databaseColumn)($field.databaseColumn);
        #end
    }

    ## for each field
    #foreach($field in $module.fields)
        ## shift is the bitwise offset, for eg, if there are 5 columns, that'll be 4 for the first, 3 for the second, ..., 0 for the last
        #set($shift=$module.fields.size()-$velocityCount)
        ##velocityCount0 is the 0 based index
        #set($velocityCount0=$velocityCount - 1)
        ## getter
        get$StringUtils.capitalize($field.databaseColumn) (): boolean {
            return (this.mask >> $shift & 1) == 1;
        }
        ## setter
        set$StringUtils.capitalize($field.databaseColumn) ($field.databaseColumn: boolean): ${module.alias}Mask {
            if ($field.databaseColumn) this.mask |= 0b$StringUtils.repeat("0",$velocityCount0)1$StringUtils.repeat("0",$shift);
            else this.mask &= 0b$StringUtils.repeat("1",$velocityCount0)0$StringUtils.repeat("1",$shift);
            return this;
        }
    #end

    ## all
    all(b: boolean): ${module.alias}Mask {
        #foreach($field in $module.fields)
            this.set$StringUtils.capitalize($field.databaseColumn)(b);
        #end
        return this;
    }

    ## keys
    keys(b: boolean): ${module.alias}Mask {
        #foreach($keyField in $projectContext.read("$.modules[$index].fields[?(@.databaseColumn in $keyUnique.items)]"))
            this.set$StringUtils.capitalize($keyField.databaseColumn)(b);
        #end
        return this;
    }

    ## attributes
    attributes(b: boolean): ${module.alias}Mask {
        #foreach($attributeField in $projectContext.read("$.modules[$index].fields[?(@.databaseColumn nin $keyUnique.items && @.source=='table')]"))
            this.set$StringUtils.capitalize($attributeField.databaseColumn)(b);
        #end
        return this;
    }

    ## physicals
    physicals(b: boolean): ${module.alias}Mask {
        #foreach($physicalField in $projectContext.read("$.modules[$index].fields[?(@.source=='table')]"))
            this.set$StringUtils.capitalize($physicalField.databaseColumn)(b);
        #end
        return this;
    }

    ## virtuals
    virtuals(b: boolean): ${module.alias}Mask {
        #foreach($virtualField in $projectContext.read("$.modules[$index].fields[?(@.source=='view')]"))
            this.set$StringUtils.capitalize($virtualField.databaseColumn)(b);
        #end
        return this;
    }

    ## getter by field name
    get(p: string): boolean {
        switch(p) {
            #foreach($field in $module.fields)
                case "$field.databaseColumn":
                    return this.get$StringUtils.capitalize($field.databaseColumn)();
            #end
        }
        return false;
    }

    ## setter by field name
    set(p: string, b: boolean): ${module.alias}Mask {
        switch(p) {
            #foreach($field in $module.fields)
                case "$field.databaseColumn":
                    this.set$StringUtils.capitalize($field.databaseColumn)(b);
                    break;
            #end
        }
        return this;
    }

    ## toString
    toString(): string {
        return this.mask.toString();
    }
}

function deserialize${module.alias}Mask(str: string): ${module.alias}Mask | null {
    try {
        let mask = new ${module.alias}Mask();
        mask.mask = parseInt(str) & 0b$StringUtils.repeat("1",$module.fields.size());
        return mask;
    } catch {
        return null;
    }
}

export{
    ${module.alias}Mask,
    deserialize${module.alias}Mask
}