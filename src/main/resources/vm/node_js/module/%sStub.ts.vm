## Context:
##   Class StringUtils
##   Class JsonPath
##   LinkedHashMap project
##   Integer index
#set($dollar="$")

#set($projectContext=$JsonPath.parse($project))
#set($keyUnique=$projectContext.read("$.modules[$index].uniques[?(@.key==true)]")[0])
#set($dateKeyExists=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn in $keyUnique.items && @.javaType=='java.util.Date' && @.datePrecision=='date')]").size()>0)
#set($datetimeKeyExists=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn in $keyUnique.items && @.javaType=='java.util.Date' && @.datePrecision=='datetime')]").size()>0)

#set($module=$project.modules[$index])
import {FilterLogicExpr} from "../filter";
import {OrderByListExpr} from "../order";
import {ContentRange, deserializeContentRange} from "../range";
import {SERVER_PROTOCOL, SERVER_HOST, SERVER_PORT, SERVER_APP, ServerError, parameters} from "../common";
import {${module.alias}Mask} from "../mask/${module.alias}Mask";
import {deserialize${module.alias}, deserialize${module.alias}List, ${module.alias}} from "../bean/${module.alias}";
#if($dateKeyExists && $datetimeKeyExists)
import {formatDate, formatDateTime, parseDate, parseDateTime} from "../dateFormatter";
#elseif($dateKeyExists && !$datetimeKeyExists)
import {formatDate, parseDate} from "../dateFormatter";
#elseif(!$dateKeyExists && $datetimeKeyExists)
import {formatDateTime, parseDateTime} from "../dateFormatter";
#end

const PATH = "$module.path";
const LIST_PATH = "$module.listPath";
const ATTACHMENT_PATH = "$module.attachmentPath";

async function get${module.alias} (
    key: { ##
        #foreach($keyItem in $keyUnique.items)
            #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
            #if($keyField.javaType=="Integer")
                $keyField.databaseColumn: number ##
            #elseif($keyField.javaType=="Double")
                $keyField.databaseColumn: number ##
            #elseif($keyField.javaType=="String")
                $keyField.databaseColumn: string ##
            #elseif($keyField.javaType=="java.util.Date")
                $keyField.databaseColumn: Date ##
            #end
            #if($velocityHasNext)
                ; ##
            #end
        #end
    },
    mask?: ${module.alias}Mask): Promise<{ statusCode: number; $StringUtils.uncapitalize($module.alias): ${module.alias} }> {
    const dict = Object();
    dict.mask = mask;
    #set($keys="")
    #foreach($keyItem in $keyUnique.items)
        #if($keyField.javaType=="Integer")
            #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
        #elseif($keyField.javaType=="Double")
            #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
        #elseif($keyField.javaType=="String")
            #set($keys=$keys+"/${dollar}{key.${keyItem}}")
        #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
            #set($keys=$keys+"/${dollar}{formatDate(key.${keyItem})}")
        #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
            #set($keys=$keys+"/${dollar}{formatDateTime(key.${keyItem})}")
        #end
    #end
    const response = await fetch(`${dollar}{SERVER_PROTOCOL}//${dollar}{SERVER_HOST}:${dollar}{SERVER_PORT.toString()}/${dollar}{SERVER_APP}/${dollar}{PATH}$keys${dollar}{parameters(dict)}`, {method: 'GET', credentials: 'include', headers: {'Content-Type': 'application/json;charset=UTF-8'}});
    if (response.status < 400)
        return {
            statusCode: response.status,
            $StringUtils.uncapitalize($module.alias): deserialize${module.alias}(await response.text())
        };
    else
        throw new ServerError(response.status);
##    return new Promise(function (resolve, reject) {
##        const request = http.request({
##            protocol: '$protocol',
##            host: '$host',
##            port: $port,
##            method: 'GET',
##            credentials: 'include',
##            #set($keys="")
##            #foreach($keyItem in $keyUnique.items)
##                #if($keyField.javaType=="Integer")
##                    #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
##                #elseif($keyField.javaType=="Double")
##                    #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
##                #elseif($keyField.javaType=="String")
##                    #set($keys=$keys+"/${dollar}{key.${keyItem}}")
##                #elseif($keyField.javaType=="java.util.Date"&&$key Field.datePrecision=="date")
##                    #set($keys=$keys+"/${dollar}{formatDate(key.${keyItem})}")
##                #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
##                    #set($keys=$keys+"/${dollar}{formatDateTime(key.${keyItem})}")
##                #end
##            #end
##            path: `/${project.envJtee.app}/${module.path}$keys${dollar}{parameters(dict)}`
##        }, (response: any) => {
##            if (response.status < 400)
##                response.on('data', (data: any) => resolve({
##                    statusCode: response.statusCode,
##                    $StringUtils.uncapitalize($module.alias): deserialize${module.alias}(data.toString()),
##                }));
##            else
##                throw new ServerError(response.status);
##        }).on('error', (error: any) => reject(error));
##        request.end();
##    });
}

async function add${module.alias} (bean: $module.alias): Promise<{ statusCode: number; $StringUtils.uncapitalize($module.alias): ($module.alias) }> {
    #set($keys="")
    #if(!$keyUnique.serial)
        #foreach($keyItem in $keyUnique.items)
            #if($keyField.javaType=="Integer")
                #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
            #elseif($keyField.javaType=="Double")
                #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
            #elseif($keyField.javaType=="String")
                #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem} : ''}")
            #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
                #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDate(bean.${keyItem}) : ''}")
            #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
                #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDateTime(bean.${keyItem}) : ''}")
            #end
        #end
    #end
    const response = await fetch(`${dollar}{SERVER_PROTOCOL}//${dollar}{SERVER_HOST}:${dollar}{SERVER_PORT.toString()}/${dollar}{SERVER_APP}/${dollar}{PATH}$keys`, {method: 'POST', credentials: 'include', headers: {'Content-Type': 'application/json;charset=UTF-8'}, body: bean.toString()});
    if (response.status < 400)
        return {
            statusCode: response.status,
            $StringUtils.uncapitalize($module.alias): deserialize${module.alias}(await response.text()),
        };
    else
        throw new ServerError(response.status);
##    return new Promise(function (resolve, reject) {
##        const request = http.request({
##            protocol: '$protocol',
##            host: '$host',
##            port: $port,
##            method: 'POST',
##            credentials: 'include',
##            #set($keys="")
##            #if(!$keyUnique.serial)
##                #foreach($keyItem in $keyUnique.items)
##                    #if($keyField.javaType=="Integer")
##                        #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
##                    #elseif($keyField.javaType=="Double")
##                        #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
##                    #elseif($keyField.javaType=="String")
##                        #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem} : ''}")
##                    #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
##                        #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDate(bean.${keyItem}) : ''}")
##                    #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
##                        #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDateTime(bean.${keyItem}) : ''}")
##                    #end
##                #end
##            #end
##            path: `/${project.envJtee.app}/${module.path}$keys`
##        }, (response: any) => {
##            if (response.status < 400)
##                response.on('data', (data: any) => resolve({
##                    statusCode: response.statusCode,
##                    $StringUtils.uncapitalize($module.alias): deserialize${module.alias}(data.toString()),
##                }));
##            else
##                throw new ServerError(response.status);
##        }).on('error', (error: any) => reject(error));
##        request.write(bean.toString());
##        request.end();
##    });
}

async function update${module.alias} (bean: $module.alias, mask?: ${module.alias}Mask): Promise<{ statusCode: number; $StringUtils.uncapitalize($module.alias): ($module.alias) }> {
    const dict = Object();
    dict.mask = mask;
    #set($keys="")
    #foreach($keyItem in $keyUnique.items)
        #if($keyField.javaType=="Integer")
            #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
        #elseif($keyField.javaType=="Double")
            #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
        #elseif($keyField.javaType=="String")
            #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem} : ''}")
        #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
            #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDate(bean.${keyItem}) : ''}")
        #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
            #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDateTime(bean.${keyItem}) : ''}")
        #end
    #end
    const response = await fetch(`${dollar}{SERVER_PROTOCOL}//${dollar}{SERVER_HOST}:${dollar}{SERVER_PORT.toString()}/${dollar}{SERVER_APP}/${dollar}{PATH}$keys${dollar}{parameters(dict)}`, {method: 'PUT', credentials: 'include', headers: {'Content-Type': 'application/json;charset=UTF-8'}, body: bean.toString()});
    if (response.status < 400)
        return {
            statusCode: response.status,
            $StringUtils.uncapitalize($module.alias): deserialize${module.alias}(await response.text()),
        };
    else
        throw new ServerError(response.status);
##    return new Promise(function (resolve, reject) {
##        const request = http.request({
##            protocol: '$protocol',
##            host: '$host',
##            port: $port,
##            method: 'PUT',
##            credentials: 'include',
##            #set($keys="")
##            #foreach($keyItem in $keyUnique.items)
##                #if($keyField.javaType=="Integer")
##                    #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
##                #elseif($keyField.javaType=="Double")
##                    #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem}.toString() : ''}")
##                #elseif($keyField.javaType=="String")
##                    #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? bean.${keyItem} : ''}")
##                #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
##                    #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDate(bean.${keyItem}) : ''}")
##                #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
##                    #set($keys=$keys+"/${dollar}{bean.${keyItem} !== null ? formatDateTime(bean.${keyItem}) : ''}")
##                #end
##            #end
##            path: `/${project.envJtee.app}/${module.path}$keys${dollar}{parameters(dict)}`
##        }, (response: any) => {
##            if (response.status < 400)
##                response.on('data', (data: any) => resolve({
##                    statusCode: response.statusCode,
##                    $StringUtils.uncapitalize($module.alias): deserialize${module.alias}(data.toString()),
##                }));
##            else
##                throw new ServerError(response.status);
##        }).on('error', (error: any) => reject(error));
##        request.write(bean.toString());
##        request.end();
##    });
}

async function delete${module.alias} ( ##
        key: { ##
            #foreach($keyItem in $keyUnique.items)
                #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
                #if($keyField.javaType=="Integer")
                    $keyField.databaseColumn: number ##
                #elseif($keyField.javaType=="Double")
                    $keyField.databaseColumn: number ##
                #elseif($keyField.javaType=="String")
                    $keyField.databaseColumn: string ##
                #elseif($keyField.javaType=="java.util.Date")
                    $keyField.databaseColumn: Date ##
                #end
                #if($velocityHasNext)
                    ; ##
                #end
            #end
        } ##
    ): Promise<{ statusCode: number; key: { ##
        #foreach($keyItem in $keyUnique.items)
            #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
            #if($keyField.javaType=="Integer")
                $keyField.databaseColumn: number ##
            #elseif($keyField.javaType=="Double");
                $keyField.databaseColumn: number ##
            #elseif($keyField.javaType=="String")
                $keyField.databaseColumn: string ##
            #elseif($keyField.javaType=="java.util.Date")
                $keyField.databaseColumn: Date ##
            #end
            #if($velocityHasNext)
                ; ##
            #end
        #end
        } }> {
    #set($keys="")
    #foreach($keyItem in $keyUnique.items)
        #if($keyField.javaType=="Integer")
            #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
        #elseif($keyField.javaType=="Double")
            #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
        #elseif($keyField.javaType=="String")
            #set($keys=$keys+"/${dollar}{key.${keyItem}}")
        #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
            #set($keys=$keys+"/${dollar}{formatDate(key.${keyItem})}")
        #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
            #set($keys=$keys+"/${dollar}{formatDateTime(key.${keyItem})}")
        #end
    #end
    const response = await fetch(`${dollar}{SERVER_PROTOCOL}//${dollar}{SERVER_HOST}:${dollar}{SERVER_PORT.toString()}/${dollar}{SERVER_APP}/${dollar}{PATH}$keys`, {method: 'DELETE', credentials: 'include', headers: {'Content-Type': 'application/json;charset=UTF-8'}});
    if (response.status < 400)
        return {
            statusCode: response.status,
            key: {
                #foreach($keyItem in $keyUnique.items)
                    $keyItem: key.$keyItem ##
                    #if($velocityHasNext)
                        , ##
                    #end
                #end
            }
        };
    else
        throw new ServerError(response.status);

##    return new Promise(function (resolve, reject) {
##        const request = http.request({
##            protocol: '$protocol',
##            host: '$host',
##            port: $port,
##            method: 'DELETE',
##            credentials: 'include',
##            #set($keys="")
##            #foreach($keyItem in $keyUnique.items)
##                #if($keyField.javaType=="Integer")
##                    #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
##                #elseif($keyField.javaType=="Double")
##                    #set($keys=$keys+"/${dollar}{key.${keyItem}.toString()}")
##                #elseif($keyField.javaType=="String")
##                    #set($keys=$keys+"/${dollar}{key.${keyItem}}")
##                #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="date")
##                    #set($keys=$keys+"/${dollar}{formatDate(key.${keyItem})}")
##                #elseif($keyField.javaType=="java.util.Date"&&$keyField.datePrecision=="datetime")
##                    #set($keys=$keys+"/${dollar}{formatDateTime(key.${keyItem})}")
##                #end
##            #end
##            path: `/${project.envJtee.app}/${module.path}$keys`
##        }, (response: any) => {
##            if (response.status < 400)
##                resolve({
##                    statusCode: response.statusCode,
##                    key: {
##                        #foreach($keyItem in $keyUnique.items)
##                            $keyItem: key.$keyItem ##
##                            #if($velocityHasNext)
##                                , ##
##                            #end
##                        #end
##                    }
##                });
##            else
##                throw new ServerError(response.status);
##        }).on('error', (error: any) => reject(error));
##        request.end();
##    });
}

async function delete${module.alias}Safely (
        key: { ##
            #foreach($keyItem in $keyUnique.items)
                #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
                #if($keyField.javaType=="Integer")
                    $keyField.databaseColumn: number ##
                #elseif($keyField.javaType=="Double")
                    $keyField.databaseColumn: number ##
                #elseif($keyField.javaType=="String")
                    $keyField.databaseColumn: string ##
                #elseif($keyField.javaType=="java.util.Date")
                    $keyField.databaseColumn: Date ##
                #end
                #if($velocityHasNext)
                    ; ##
                #end
            #end
        } ##
    ): Promise<{ statusCode: number; key: { ##
        #foreach($keyItem in $keyUnique.items)
            #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
            #if($keyField.javaType=="Integer")
                $keyField.databaseColumn: number ##
            #elseif($keyField.javaType=="Double");
                $keyField.databaseColumn: number ##
            #elseif($keyField.javaType=="String")
                $keyField.databaseColumn: string ##
            #elseif($keyField.javaType=="java.util.Date")
                $keyField.databaseColumn: Date ##
            #end
            #if($velocityHasNext)
                ; ##
            #end
        #end
        } }> {
    try {
        return await delete${module.alias}(key);
    } catch (e) {
        return {
            statusCode: e.statusCode,
            key
        };
    }
}

async function batchDelete${module.alias}( ##
        keys: Array<{ ##
            #foreach($keyItem in $keyUnique.items)
                #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
                #if($keyField.javaType=="Integer")
                    $keyField.databaseColumn: number ##
                #elseif($keyField.javaType=="Double")
                    $keyField.databaseColumn: number ##
                #elseif($keyField.javaType=="String")
                    $keyField.databaseColumn: string ##
                #elseif($keyField.javaType=="java.util.Date")
                    $keyField.databaseColumn: Date ##
                #end
                #if($velocityHasNext)
                    ; ##
                #end
            #end
        } ##
    >): Promise<Array<{ statusCode: number; key: { ##
         #foreach($keyItem in $keyUnique.items)
             #set($keyField=$projectContext.read("$.modules[$index].fields[?(@.databaseColumn=='$keyItem')]")[0])
             #if($keyField.javaType=="Integer")
                 $keyField.databaseColumn: number ##
             #elseif($keyField.javaType=="Double");
                 $keyField.databaseColumn: number ##
             #elseif($keyField.javaType=="String")
                 $keyField.databaseColumn: string ##
             #elseif($keyField.javaType=="java.util.Date")
                 $keyField.databaseColumn: Date ##
             #end
             #if($velocityHasNext)
                 ; ##
             #end
         #end
    } }>> {
    return await Promise.all(keys.map(v => delete${module.alias}Safely(v)));
}

async function query${module.alias} (options: { filter?: FilterLogicExpr; orderBy?: OrderByListExpr; pageSize?: number; pageNumber?: number; mask?: ${module.alias}Mask }): Promise<{ statusCode: number; list: Array<$module.alias>; contentRange: ContentRange }> {
    const pageSize = options.pageSize !== undefined ? options.pageSize : 10;
    const pageNumber = options.pageNumber !== undefined ? options.pageNumber : 1;
    const start = (pageNumber - 1) * pageSize;
    const end = pageNumber * pageSize - 1;
    const dict = Object();
    dict.orderBy = options.orderBy;
    dict.mask = options.mask;
    const response = await fetch(`${dollar}{SERVER_PROTOCOL}//${dollar}{SERVER_HOST}:${dollar}{SERVER_PORT.toString()}/${dollar}{SERVER_APP}/${dollar}{LIST_PATH}${dollar}{parameters(dict)}`, {method: 'POST', credentials: 'include', headers: {'Content-Type': 'application/json;charset=UTF-8', Range: `items=${dollar}{start}-${dollar}{end}`}, body: options.filter?.toString()});
    if (response.status < 400)
        return {
            statusCode: response.status,
            list: deserialize${module.alias}List(await response.text()),
            contentRange: deserializeContentRange(response.headers.get('content-range') as string)
        };
    else
        throw new ServerError(response.status);

##    return new Promise((resolve, reject) => {
##        const request = http.request({
##            protocol: '$protocol',
##            host: '$host',
##            port: $port,
##            method: 'POST',
##            credentials: 'include',
##            path: `/${project.envJtee.app}/${module.listPath}${dollar}{parameters(dict)}`,
##            headers: {
##                Range: `items=${dollar}{start}-${dollar}{end}`
##            }
##        }, (response: any) => {
##            if (response.status < 400)
##                response.on('data', (data: any) => resolve({
##                    statusCode: response.statusCode,
##                    contentRange: deserializeContentRange(response.headers['content-range'])!,
##                    $StringUtils.uncapitalize($module.alias)List: deserialize${module.alias}List(data.toString())
##                }));
##            else
##                throw new ServerError(response.status);
##        }).on('error', (error: any) => reject(error));
##        if (filter !== null)
##            request.write(filter.toString());
##        request.end();
##    });
}

async function count${module.alias} (options: {filter?: FilterLogicExpr}): Promise<{ statusCode: number; total: number }> {
    const response = await fetch(`${dollar}{SERVER_PROTOCOL}//${dollar}{SERVER_HOST}:${dollar}{SERVER_PORT.toString()}/${dollar}{SERVER_APP}/${dollar}{LIST_PATH}`, {method: 'POST', credentials: 'include', headers: {'Content-Type': 'application/json;charset=UTF-8', Range: `items=items=1--1`}, body: options.filter?.toString()});
    if (response.status < 400)
        return {
            statusCode: response.status,
            total: deserializeContentRange(response.headers.get('content-range') as string).total
        };
    else
        throw new ServerError(response.status);
##    return new Promise((resolve, reject) => {
##        const request = http.request({
##            protocol: '$protocol',
##            host: '$host',
##            port: $port,
##            method: 'POST',
##            credentials: 'include',
##            path: `/${project.envJtee.app}/${module.listPath}`,
##            headers: {
##                Range: `items=1--1`
##            }
##        }, (response: any) => {
##            if (response.status < 400)
##                response.on('data', (data: any) => resolve({
##                    statusCode: response.statusCode,
##                    total: deserializeContentRange(response.headers['content-range'])!.total
##                }));
##            else
##                throw new ServerError(response.status);
##        }).on('error', (error: any) => reject(error));
##        if (filter !== null)
##            request.write(filter.toString());
##        request.end();
##    });
}

//todo attachments
export {
    PATH,
    LIST_PATH,
    ATTACHMENT_PATH,
    get$module.alias,
    add$module.alias,
    update$module.alias,
    delete$module.alias,
    delete${module.alias}Safely,
    batchDelete$module.alias,
    query$module.alias,
    count$module.alias
}